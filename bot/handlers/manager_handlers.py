from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import asyncpg
import logging

from keyboards import get_main_menu_keyboard, get_confirm_assign_employee_keyboard, get_keyboard_with_back_button, get_users_for_assign_employee_keyboard, get_employees_for_remove_keyboard, get_employees_for_assign_task_keyboard
from states import ManagerStates
from config import ADMIN_ID
from instructions import EMPLOYEE_INSTRUCTIONS
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

router = Router()

app_logger = logging.getLogger('app')
user_logger = logging.getLogger('user_actions')

status_emojis = {
    'new': 'üÜï',
    'accepted': '‚úÖ',
    'completed': 'üéâ',
    'rejected': '‚ùå'
}

status_display_map = {
    'new': '–ù–æ–≤–∞—è',
    'accepted': '–ü—Ä–∏–Ω—è—Ç–∞',
    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
    'rejected': '–û—Ç–∫–∞–∑–∞–Ω–∞'
}

async def is_manager(user_id: int, pool: asyncpg.Pool) -> bool:
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT role FROM users WHERE user_id = $1', user_id)
        return user and user['role'] == 'manager'

async def send_task_notification(bot: Bot, user_id: int, message_text: str, reply_markup = None, parse_mode: str = 'HTML'):
    try:
        await bot.send_message(user_id, message_text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramForbiddenError:
        app_logger.warning(f"Target user {user_id} blocked the bot.")
    except TelegramBadRequest as e:
        app_logger.error(f"Failed to send message to user {user_id}: {e}")

async def get_manager_tasks_by_status(manager_id: int, pool: asyncpg.Pool, status: str = None):
    async with pool.acquire() as conn:
        if status:
            if status in ['completed', 'rejected']:
                tasks = await conn.fetch('''
                    SELECT t.task_id, t.title, t.description, t.status, u.full_name as employee_name, u2.full_name as manager_name
                    FROM tasks t
                    JOIN users u ON t.employee_id = u.user_id
                    JOIN users u2 ON t.manager_id = u2.user_id
                    WHERE t.manager_id = $1 AND t.status = $2
                    ORDER BY t.created_at DESC
                    LIMIT 20
                ''', manager_id, status)
            else:
                tasks = await conn.fetch('''
                    SELECT t.task_id, t.title, t.description, t.status, u.full_name as employee_name, u2.full_name as manager_name
                    FROM tasks t
                    JOIN users u ON t.employee_id = u.user_id
                    JOIN users u2 ON t.manager_id = u2.user_id
                    WHERE t.manager_id = $1 AND t.status = $2
                    ORDER BY t.created_at DESC
                ''', manager_id, status)
        else:
            tasks = await conn.fetch('''
                SELECT t.task_id, t.title, t.description, t.status, u.full_name as employee_name, u2.full_name as manager_name
                FROM tasks t
                JOIN users u ON t.employee_id = u.user_id
                JOIN users u2 ON t.manager_id = u2.user_id
                WHERE t.manager_id = $1
                ORDER BY t.created_at DESC
            ''', manager_id)
        return tasks

async def format_manager_tasks_response(tasks, status_filter: str = None):
    if tasks:
        response = "–ó–∞–¥–∞—á–∏ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n"
        for task in tasks:
            display_status = status_display_map.get(task['status'], task['status'])
            emoji = status_emojis.get(task['status'], '')
            response += (f"---------------------------\n"
                         f"ID: {task['task_id']}\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n"
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
                         f"–°—Ç–∞—Ç—É—Å: {emoji} {display_status}\n"
                         f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {task['employee_name']}\n")
        
        if status_filter in ['completed', 'rejected']:
            response += "\n<b>(–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á)</b>"
    else:
        response = "–£ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á."
    return response


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def view_employees(message: Message, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    user_id = message.from_user.id
    async with pool.acquire() as conn:
        manager_org = await conn.fetchrow('SELECT organization_id FROM users WHERE user_id = $1', user_id)
        if not manager_org or not manager_org['organization_id']:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            app_logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            return

        employees = await conn.fetch('SELECT user_id, full_name, role FROM users WHERE organization_id = $1 AND role = $2',
                                     manager_org['organization_id'], 'employee')
        if employees:
            response = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n"
            for emp in employees:
                response += f"- ID: {emp['user_id']}, –§–ò–û: {emp['full_name']}\n"
            await message.answer(response)
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        else:
            await message.answer("–í –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ø—É—Å—Ç–æ)")

@router.message(F.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def assign_employee_prompt(message: Message, state: FSMContext, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    user_id = message.from_user.id
    async with pool.acquire() as conn:
        manager_org = await conn.fetchrow('SELECT organization_id FROM users WHERE user_id = $1', user_id)
        if not manager_org or not manager_org['organization_id']:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
            app_logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return

        users = await conn.fetch('SELECT user_id, full_name, role FROM users WHERE role = $1 AND organization_id IS NULL', 'user')
        if users:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º:",
                                 reply_markup=get_users_for_assign_employee_keyboard(users))
            await state.set_state(ManagerStates.waiting_for_employee_id)
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –Ω–∞—á–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

@router.callback_query(F.data.startswith("select_user_assign_employee_"))
async def select_user_to_assign_employee(callback_query: CallbackQuery, state: FSMContext, pool: asyncpg.Pool, bot: Bot):
    user_id = int(callback_query.data.split('_')[4])
    await callback_query.message.edit_reply_markup(reply_markup=None)

    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT full_name, role FROM users WHERE user_id = $1', user_id)
        if user:
            manager_id = callback_query.from_user.id
            manager_org = await conn.fetchval('SELECT organization_id FROM users WHERE user_id = $1', manager_id)

            if manager_org:
                await conn.execute('UPDATE users SET role = $1, organization_id = $2 WHERE user_id = $3',
                                   'employee', manager_org, user_id)
                await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '<b>{user['full_name']}</b>' –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º "
                                                     f"–≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.",
                                                     reply_markup=get_main_menu_keyboard('manager'), parse_mode='HTML')
                await state.clear()
                user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user['full_name']}) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º")

                try:
                    await bot.send_message(user_id, EMPLOYEE_INSTRUCTIONS, parse_mode='HTML')
                    await bot.send_message(user_id, "–í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard('employee'))
                    user_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–æ–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {user_id}")
                except TelegramForbiddenError:
                    app_logger.warning(f"Target user {user_id} blocked the bot.")
                except TelegramBadRequest as e:
                    app_logger.error(f"Failed to send message to user {user_id}: {e}")
            else:
                await callback_query.message.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                                                     reply_markup=get_main_menu_keyboard('manager'))
                await state.clear()
                app_logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        else:
            await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º User ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                                 reply_markup=get_main_menu_keyboard('manager'))
            await state.clear()
            app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    await callback_query.answer()


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def remove_employee_prompt(message: Message, state: FSMContext, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    manager_id = message.from_user.id
    async with pool.acquire() as conn:
        manager_org_id = await conn.fetchval('SELECT organization_id FROM users WHERE user_id = $1', manager_id)
        if not manager_org_id:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            app_logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return

        employees = await conn.fetch('SELECT user_id, full_name FROM users WHERE organization_id = $1 AND role = $2',
                                     manager_org_id, 'employee')
        if employees:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                                 reply_markup=get_employees_for_remove_keyboard(employees))
            await state.set_state(ManagerStates.waiting_for_employee_id_to_remove)
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        else:
            await message.answer("–í –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")

@router.callback_query(F.data.startswith("select_employee_remove_"))
async def select_employee_to_remove(callback_query: CallbackQuery, state: FSMContext, pool: asyncpg.Pool, bot: Bot):
    user_id = int(callback_query.data.split('_')[3])
    await callback_query.message.edit_reply_markup(reply_markup=None)

    async with pool.acquire() as conn:
        employee = await conn.fetchrow('SELECT full_name FROM users WHERE user_id = $1 AND role = $2', user_id, 'employee')
        if employee:
            await conn.execute('UPDATE users SET role = $1, organization_id = NULL WHERE user_id = $2',
                               'user', user_id)
            await callback_query.message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '<b>{employee['full_name']}</b>' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç–∞–ª –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                                                 reply_markup=get_main_menu_keyboard('manager'), parse_mode='HTML')
            await state.clear()
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {callback_query.from_user.id} —É–¥–∞–ª–∏–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id} ({employee['full_name']})")

            try:
                await bot.send_message(user_id, f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b> –í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>. –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.", parse_mode='HTML')
                await bot.send_message(user_id, "–í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard('user'))
                user_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏")
            except TelegramForbiddenError:
                app_logger.warning(f"Target user {user_id} blocked the bot.")
            except TelegramBadRequest as e:
                app_logger.error(f"Failed to send message to user {user_id}: {e}")
        else:
            await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º User ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                                                 reply_markup=get_main_menu_keyboard('manager'))
            await state.clear()
            app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    await callback_query.answer()


@router.message(F.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É")
async def assign_task_prompt(message: Message, state: FSMContext, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    manager_id = message.from_user.id
    async with pool.acquire() as conn:
        manager_org_id = await conn.fetchval('SELECT organization_id FROM users WHERE user_id = $1', manager_id)
        if not manager_org_id:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            app_logger.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É")
            return

        employees = await conn.fetch('SELECT user_id, full_name FROM users WHERE organization_id = $1 AND role = $2',
                                     manager_org_id, 'employee')
        if employees:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É:",
                                 reply_markup=get_employees_for_assign_task_keyboard(employees))
            await state.set_state(ManagerStates.waiting_for_employee_id_to_assign_task)
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–∞—á–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        else:
            await message.answer("–í –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É (–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")

@router.callback_query(F.data.startswith("select_employee_assign_task_"))
async def select_employee_to_assign_task(callback_query: CallbackQuery, state: FSMContext, pool: asyncpg.Pool):
    employee_id = int(callback_query.data.split('_')[4])
    await callback_query.message.edit_reply_markup(reply_markup=None)

    async with pool.acquire() as conn:
        employee = await conn.fetchrow('SELECT full_name FROM users WHERE user_id = $1 AND role = $2', employee_id, 'employee')
        if employee:
            await state.update_data(assigned_employee_id=employee_id)
            await callback_query.message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '<b>{employee['full_name']}</b>' –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                                                 reply_markup=get_keyboard_with_back_button([]), parse_mode='HTML')
            await state.set_state(ManagerStates.waiting_for_task_title)
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id} –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
        else:
            await callback_query.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º User ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                                                 reply_markup=get_main_menu_keyboard('manager'))
            await state.clear()
            app_logger.warning(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    await callback_query.answer()

@router.message(ManagerStates.waiting_for_task_title)
async def process_task_title(message: Message, state: FSMContext):
    task_title = message.text
    await state.update_data(task_title=task_title)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
                         reply_markup=get_keyboard_with_back_button([]))
    user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {message.from_user.id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_title}")
    await state.set_state(ManagerStates.waiting_for_task_description)

@router.message(ManagerStates.waiting_for_task_description)
async def process_task_description(message: Message, state: FSMContext, pool: asyncpg.Pool, bot: Bot):
    task_description = message.text
    data = await state.get_data()
    assigned_employee_id = data.get('assigned_employee_id')
    task_title = data.get('task_title')
    manager_id = message.from_user.id

    if not all([assigned_employee_id, task_title, task_description]):
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=get_main_menu_keyboard('manager'))
        await state.clear()
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_id}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        return

    async with pool.acquire() as conn:
        manager_org_id = await conn.fetchval('SELECT organization_id FROM users WHERE user_id = $1', manager_id)
        if not manager_org_id:
            await message.answer("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            await state.clear()
            app_logger.error(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
            return

        try:
            new_task = await conn.fetchrow('''
                INSERT INTO tasks (title, description, manager_id, employee_id, organization_id, status)
                VALUES ($1, $2, $3, $4, $5, 'new') RETURNING task_id
            ''',
                task_title, task_description, manager_id, assigned_employee_id, manager_org_id
            )
            new_task_id = new_task['task_id']

            await message.answer(f"–ó–∞–¥–∞—á–∞ \'{task_title}\' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.",
                                 reply_markup=get_main_menu_keyboard('manager'))
            await state.clear()
            user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É {new_task_id} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {assigned_employee_id}")

            notification_text = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task_title}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task_description}\n"
                f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {message.from_user.full_name}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> üÜï –ù–æ–≤–∞—è"
            )
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_task_direct_{new_task_id}")]])
            await send_task_notification(bot, assigned_employee_id, notification_text, reply_markup=inline_kb, parse_mode='HTML')
            user_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {assigned_employee_id} –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ {new_task_id}")

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}",
                                 reply_markup=get_main_menu_keyboard('manager'))
            await state.clear()
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_id}: {e}")


async def format_manager_tasks_response(tasks: list, title: str, status_filter: str = None) -> str:
    response = f"<b>{title}:</b>\n\n"
    if tasks:
        for task in tasks:
            manager_name = task['manager_name'] if task['manager_name'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            employee_name = task['employee_name'] if task['employee_name'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            status_emoji = status_emojis.get(task['status'], '')
            status_display = status_display_map.get(task['status'], task['status'].capitalize())
            response += (
                f"---------------------------\n"
                f"<b>ID –ó–∞–¥–∞—á–∏:</b> {task['task_id']}\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task['title']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task['description']}\n"
                f"<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name}\n"
                f"<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {employee_name}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_display}\n"
                f"---------------------------\n"
            )
    else:
        response += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
    
    if status_filter in ['completed', 'rejected']:
        response += "\n<b>(–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ç–æ–ª—å–∫–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á)</b>"

    return response


@router.message(F.text == "–í—Å–µ –∑–∞–¥–∞—á–∏")
async def track_all_tasks_prompt(message: Message, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return
    tasks = await get_manager_tasks_by_status(message.from_user.id, pool)
    await message.answer(await format_manager_tasks_response(tasks))
    user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∑–∞–¥–∞—á–∏")

@router.message(F.text == "–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
async def track_new_tasks_prompt(message: Message, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    manager_id = message.from_user.id
    async with pool.acquire() as conn:
        tasks = await get_manager_tasks_by_status(manager_id, pool, 'new')
        response_text = await format_manager_tasks_response(tasks, "–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏", 'new')
        await message.answer(response_text, parse_mode='HTML')
        user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")

@router.message(F.text == "–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–¥–∞—á–∏")
async def track_accepted_tasks_prompt(message: Message, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    manager_id = message.from_user.id
    async with pool.acquire() as conn:
        tasks = await get_manager_tasks_by_status(manager_id, pool, 'accepted')
        response_text = await format_manager_tasks_response(tasks, "–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–¥–∞—á–∏", 'accepted')
        await message.answer(response_text, parse_mode='HTML')
        user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–¥–∞—á–∏")

@router.message(F.text == "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def track_completed_tasks_prompt(message: Message, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    manager_id = message.from_user.id
    async with pool.acquire() as conn:
        tasks = await get_manager_tasks_by_status(manager_id, pool, 'completed')
        response_text = await format_manager_tasks_response(tasks, "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", 'completed')
        await message.answer(response_text, parse_mode='HTML')
        user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

@router.message(F.text == "–û—Ç–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def track_rejected_tasks_prompt(message: Message, pool: asyncpg.Pool):
    if not await is_manager(message.from_user.id, pool):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        app_logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–∞–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        return

    manager_id = message.from_user.id
    async with pool.acquire() as conn:
        tasks = await get_manager_tasks_by_status(manager_id, pool, 'rejected')
        response_text = await format_manager_tasks_response(tasks, "–û—Ç–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", 'rejected')
        await message.answer(response_text, parse_mode='HTML')
        user_logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –æ—Ç–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")